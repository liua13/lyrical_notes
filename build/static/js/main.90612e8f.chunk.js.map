{"version":3,"sources":["images/favicon.png","Components/Start/index.js","Components/Game/Timer.js","Components/Game/TrackInfo.js","Components/Game/index.js","Components/End/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","getGenre","e","preventDefault","genre","target","value","props","updateGenre","className","genres","map","i","key","onClick","React","Component","Timer","state","startTime","totalTime","displayTime","Date","getTime","this","timeInterval","setInterval","duration","convertToTimeDisplay","setState","updateTotalTime","clearInterval","TrackInfo","href","currentTrack","external_urls","spotify","name","artists","artist","id","album","src","images","url","changeCurrentTrack","Game","giveup","updateUserGuess","increaseGameCount","updateCurrentTrack","guessTrack","event","realTitle","correctTitle","guessName","userTitle","refs","trackTitle","replace","setGiveupTrue","increaseGiveupCount","console","log","display","correct","style","backgroundColor","gameCount","totalGameCount","preview_url","controls","onSubmit","ref","placeholder","type","End","correctGuesses","incorrectGuesses","giveupCount","resetStates","App","tracks","self","axios","post","then","response","prevState","data","catch","error","prevTracks","keys","Object","length","randomKey","Math","random","randomTrack","split","trim","toLowerCase","time","milliseconds","parseInt","seconds","floor","minutes","hours","Helmet","title","meta","content","link","rel","favicon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wuCAAAA,EAAOC,QAAU,IAA0B,qC,wQCkC5BC,G,kNA7BbC,SAAW,SAACC,GACVA,EAAEC,iBACM,eAAR,IACIC,EAAQF,EAAEG,OAAOC,MACrB,EAAKC,MAAMC,YAAYJ,I,uDAGf,IAAD,OACP,OACE,6BACE,8CACA,uFACA,yBAAKK,UAAU,mBACZC,EAAOA,OAAOC,KAAI,SAACP,EAAOQ,GAAR,OACjB,4BACEH,UAAU,gBACVI,IAAKD,EACLN,MAAOF,EACPU,QAAS,EAAKb,UAEbG,Y,GArBKW,IAAMC,YC2BXC,E,4MA5BbC,MAAQ,CACNC,UAAW,KACXC,UAAW,EACXC,YAAa,e,kEAGM,IAAD,OACZF,GAAY,IAAIG,MAAOC,UAC7BC,KAAKC,aAAeC,aAAY,WAC9B,IAAMC,GAAW,IAAIL,MAAOC,UAAY,EAAKL,MAAMC,UAC7CE,EAAc,EAAKd,MAAMqB,qBAAqBD,GACpD,EAAKE,SAAS,CACZR,kBAED,GACHG,KAAKK,SAAS,CAAEV,gB,6CAIhBK,KAAKjB,MAAMuB,iBAAgB,IAAIR,MAAOC,UAAYC,KAAKN,MAAMC,WAC7DY,cAAcP,KAAKC,gB,+BAInB,OAAO,6BAAMD,KAAKN,MAAMG,iB,GAzBRN,IAAMC,WC+BXgB,EA/BG,SAACzB,GACjB,OACE,6BACE,uBAAG0B,KAAM1B,EAAM2B,aAAaC,cAAcC,QAAS/B,OAAO,UACvDE,EAAM2B,aAAaG,MACjB,IAHP,KAIK,IACF9B,EAAM2B,aAAaI,QAAQ3B,KAAI,SAAC4B,GAAD,OAC9B,0BAAM1B,IAAK0B,EAAOC,IAChB,uBAAGP,KAAMM,EAAOJ,cAAcC,QAAS/B,OAAO,UAC3CkC,EAAOF,MACL,IAHP,IAII,QAIN,oCACS,IACP,uBACEJ,KAAM1B,EAAM2B,aAAaO,MAAMN,cAAcC,QAC7C/B,OAAO,UAENE,EAAM2B,aAAaO,MAAMJ,OAG9B,yBAAKK,IAAKnC,EAAM2B,aAAaO,MAAME,OAAO,GAAGC,MAC7C,4BAAQ9B,QAASP,EAAMsC,oBAAvB,UC2ESC,G,kNAjGb5B,MAAQ,CACN6B,QAAQ,G,EAGVF,mBAAqB,WAEnB,EAAKhB,SAAS,CACZkB,QAAQ,IAEV,EAAKxC,MAAMyC,gBAAgB,MAC3B,EAAKzC,MAAM0C,oBACX,EAAK1C,MAAM2C,sB,EAGbC,WAAa,SAACC,GAEZA,EAAMjD,iBACN,IAAIkD,EAAY,EAAK9C,MAAM2B,aAAaG,KACpCiB,EAAe,EAAK/C,MAAM2B,aAAaqB,UACvCC,EAAY,EAAKC,KAAKC,WAAWpD,MACrCkD,EAAYA,EAAUG,QAAQ,IAAK,IAEnC,EAAKpD,MAAMyC,gBACTM,GAAgBE,GAAaH,GAAaG,I,EAI9CI,cAAgB,WACd,EAAKrD,MAAMsD,sBACX,EAAKhC,SAAS,CACZkB,QAAQ,K,uDAKVe,QAAQC,IAAIvC,KAAKjB,MAAM2B,aAAaqB,WACpC,IAAIS,EAAU,GAuBd,OAtB0B,GAAtBxC,KAAKjB,MAAM0D,QAEbD,EACE,6BACE,wCACA,kBAAC,EAAD,CACE9B,aAAcV,KAAKjB,MAAM2B,aACzBW,mBAAoBrB,KAAKqB,sBAItBrB,KAAKN,MAAM6B,OACpBiB,EACE,kBAAC,EAAD,CACE9B,aAAcV,KAAKjB,MAAM2B,aACzBW,mBAAoBrB,KAAKqB,qBAGE,GAAtBrB,KAAKjB,MAAM0D,UACpBD,EAAU,sDAIV,yBAAKvD,UAAU,YAAYyD,MAAO1C,KAAKjB,MAAM4D,kBACzC3C,KAAKjB,MAAM0D,UAAYzC,KAAKN,MAAM6B,QAClC,kBAAC,EAAD,CACEjB,gBAAiBN,KAAKjB,MAAMuB,gBAC5BF,qBAAsBJ,KAAKjB,MAAMqB,qBACjCmB,OAAQvB,KAAKN,MAAM6B,OACnBkB,QAASzC,KAAKjB,MAAM0D,UAGxB,4BAAKzC,KAAKjB,MAAMH,OAChB,2BACGoB,KAAKjB,MAAM6D,UAAY,EAD1B,MACgC5C,KAAKjB,MAAM8D,gBAE3C,2BAAO3B,IAAKlB,KAAKjB,MAAM2B,aAAaoC,YAAaC,UAAQ,KAEvD/C,KAAKjB,MAAM0D,UAAYzC,KAAKN,MAAM6B,QAClC,6BACE,4BAAQtC,UAAU,gBAAgBK,QAASU,KAAKoC,eAAhD,WAGA,0BAAMY,SAAUhD,KAAK2B,YACnB,2BACEX,GAAG,YACHiC,IAAI,aACJC,YAAY,aACZC,KAAK,SAEP,4BAAQA,KAAK,UAAb,WAIN,yBAAKlE,UAAU,gBAAgBuD,Q,GA5FpBjD,IAAMC,YCkCV4D,G,6KAlCX,OACE,yBAAKnE,UAAU,aACb,0CACA,yBAAKA,UAAU,uBACb,2BACE,iDADF,IACgC,IAC9B,8BAAOe,KAAKjB,MAAMsE,iBAEpB,2BACE,mDADF,IACkC,IAChC,8BAAOrD,KAAKjB,MAAMuE,mBAEpB,2BACE,yCADF,KACwB,8BAAOtD,KAAKjB,MAAMwE,YAAlB,WAExB,2BACE,4CADF,IAC2B,IACzB,8BAAOvD,KAAKjB,MAAMqB,qBAAqBJ,KAAKjB,MAAMa,aAEpD,2BACE,8CADF,IAC6B,IAC3B,8BACGI,KAAKjB,MAAMqB,qBACVJ,KAAKjB,MAAMa,UAAYI,KAAKjB,MAAM6D,cAK1C,4BAAQtD,QAASU,KAAKjB,MAAMyE,aAA5B,mB,GA9BUjE,IAAMC,Y,iBCmPTiE,G,kNA5Ob/D,MAAQ,CACNd,MAAO,KACP8E,OAAQ,GACRhD,aAAc,KACdmC,eAAgB,GAChBD,UAAW,EACXS,eAAgB,EAChBC,iBAAkB,EAClBC,YAAa,EACbd,QAAS,KACTE,gBAAiB,CAAEA,gBAAiB,WACpC/C,UAAW,G,EAGbZ,YAAc,SAACJ,GAEb,IAAM+E,EAAI,eACVC,IACGC,KAAK,uBAAwB,CAC5BjF,UAEDkF,MAAK,SAAUC,GACdzB,QAAQC,IAAI3D,GACZ+E,EAAKtD,UAAS,SAAC2D,GACb,MAAO,CACLpF,QACA8E,OAAQK,EAASE,SAGrBN,EAAKjC,wBAENwC,OAAM,SAAUC,GACf7B,QAAQC,IAAI4B,O,EAIlBzC,mBAAqB,WACnB,EAAKrB,UAAS,SAAC2D,GACb,IAAMI,EAAaJ,EAAUN,OACzBW,EAAOC,OAAOD,KAAKD,GACvB,GAAmB,GAAfC,EAAKE,QAAuC,GAAxB,EAAK7E,MAAMkD,UAE5B,GAAmB,GAAfyB,EAAKE,OAAT,CASP,IAJA,IAAIC,EAAaH,EAAKE,OAASE,KAAKC,UAAa,EAC7CC,EAAcP,EAAWC,EAAKG,KAG1BG,EAAY7B,aAA8B,GAAfuB,EAAKE,eAC/BH,EAAWC,EAAKG,IAGvBG,EAAcP,GAFdC,EAAOC,OAAOD,KAAKD,IACnBI,EAAaH,EAAKE,OAASE,KAAKC,UAAa,IAI/C,GAAmB,GAAfL,EAAKE,OAAT,CAMA,IAAIrC,EAAayC,EAAY9D,KAY7B,OANAqB,GADAA,GADAA,GADAA,GADAA,GADAA,EAAaA,EAAW0C,MAAM,KAAK,IACXA,MAAM,KAAK,IACXA,MAAM,KAAK,IACXzC,QAAQ,IAAK,QACbA,QAAQ,IAAK,KACb0C,OAAOC,cAC/BH,EAAY5C,UAAYG,SAGjBkC,EAAWC,EAAKG,IAEhB,CACL9D,aAAciE,EACdjB,OAAQU,GAnBR,EAAKpF,YAAY,EAAKU,MAAMd,YAhB5B,EAAKI,YAAY,EAAKU,MAAMd,W,EAwClC4E,YAAc,WAEZ,EAAKnD,UAAS,SAAC2D,GACb,MAAO,CACLpF,MAAO,KACP8E,OAAQ,GACRhD,aAAc,KACd+B,QAAS,KACTG,UAAW,EACXS,eAAgB,EAChBC,iBAAkB,EAClBC,YAAa,EACb3D,UAAW,O,EAKjB6B,kBAAoB,WAElB,EAAKpB,UAAS,SAAC2D,GACb,MAAO,CACLpB,UAAWoB,EAAUpB,UAAY,O,EAKvCP,oBAAsB,WAEpB,EAAKhC,UAAS,SAAC2D,GACb,MAAO,CACLT,YAAaS,EAAUT,YAAc,O,EAK3C/B,gBAAkB,SAAC1C,GAGjB,IAAI4D,EAAQ,CACVC,gBAAiB,WAEN,GAAT7D,GACF4D,EAAMC,gBAAkB,UACxB,EAAKtC,UAAS,SAAC2D,GACb,MAAO,CACLX,eAAgBW,EAAUX,eAAiB,OAG7B,GAATvE,IACT4D,EAAMC,gBAAkB,UACxB,EAAKtC,UAAS,SAAC2D,GACb,MAAO,CACLV,iBAAkBU,EAAUV,iBAAmB,OAKrD,EAAKjD,SAAS,CACZoC,QAAS3D,EACT6D,gBAAiBD,K,EAIrBpC,gBAAkB,SAACyE,GACjB,EAAK1E,UAAS,SAAC2D,GACb,MAAO,CACLpE,UAAWoE,EAAUpE,UAAYmF,O,EAKvC3E,qBAAuB,SAACD,GACtB,IAAI6E,EAAeC,SAAU9E,EAAW,IAAQ,KAC5C+E,EAAUT,KAAKU,MAAOhF,EAAW,IAAQ,IACzCiF,EAAUX,KAAKU,MAAOhF,EAAQ,IAAkB,IAChDkF,EAAQZ,KAAKU,MAAOhF,EAAQ,KAAuB,IAMvD,OAJAkF,EAAQA,EAAQ,GAAK,IAAMA,EAAQA,GAIpB,KAHfD,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAGV,KAF/BF,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAEM,IAAMF,G,uDAIrD,IAAIxC,EAqCJ,OAnCEA,EADExC,KAAKN,MAAMkD,WAAa5C,KAAKN,MAAMmD,eAEnC,kBAAC,EAAD,CACED,UAAW5C,KAAKN,MAAMkD,UACtBS,eAAgBrD,KAAKN,MAAM2D,eAC3BC,iBAAkBtD,KAAKN,MAAM4D,iBAC7BC,YAAavD,KAAKN,MAAM6D,YACxB3D,UAAWI,KAAKN,MAAME,UACtB4D,YAAaxD,KAAKwD,YAClBpD,qBAAsBJ,KAAKI,uBAGtBJ,KAAKN,MAAMgB,aAElB,6BACE,kBAAC,EAAD,CACEA,aAAcV,KAAKN,MAAMgB,aACzB9B,MAAOoB,KAAKN,MAAMd,MAClBgE,UAAW5C,KAAKN,MAAMkD,UACtBC,eAAgB7C,KAAKN,MAAMmD,eAC3BJ,QAASzC,KAAKN,MAAM+C,QACpBE,gBAAiB3C,KAAKN,MAAMiD,gBAC5B/C,UAAWI,KAAKJ,UAChB8B,mBAAoB1B,KAAK0B,mBACzB8B,YAAaxD,KAAKwD,YAClB/B,kBAAmBzB,KAAKyB,kBACxBY,oBAAqBrC,KAAKqC,oBAC1Bb,gBAAiBxB,KAAKwB,gBACtBlB,gBAAiBN,KAAKM,gBACtBF,qBAAsBJ,KAAKI,wBAKvB,kBAAC,EAAD,CAAOpB,YAAagB,KAAKhB,cAGnC,6BACE,kBAACsG,EAAA,EAAD,CACEC,MAAM,gBACNC,KAAM,CACJ,CACE3E,KAAM,cACN4E,QAAS,qDAEX,CACE5E,KAAM,WACN4E,QAAS,yBAGbC,KAAM,CACJ,CAAEC,IAAK,gBAAiBxC,KAAM,YAAa1C,KAAK,GAAD,OAAKmF,SAGxD,yBAAK3G,UAAU,MAAMyD,MAAO1C,KAAKN,MAAMiD,iBACpCH,EACD,uDACwB,uBAAG/B,KAAK,uBAAR,aAA4C,IADpE,SAEU,IACR,uBAAGA,KAAK,2CAAR,sB,GArOMlB,IAAMC,YCGJqG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMwC,c","file":"static/js/main.90612e8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.edd59a5c.png\";","import React from \"react\";\nimport genres from \"../../data/genres.json\";\nimport \"./index.css\";\n\nclass Start extends React.Component {\n  getGenre = (e) => {\n    e.preventDefault();\n    let self = this;\n    let genre = e.target.value;\n    this.props.updateGenre(genre);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>select a genre</h1>\n        <p>and guess the song from listening to a 30 second preview</p>\n        <div className=\"genre-container\">\n          {genres.genres.map((genre, i) => (\n            <button\n              className=\"genre-buttons\"\n              key={i}\n              value={genre}\n              onClick={this.getGenre}\n            >\n              {genre}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Start;\n","import React from \"react\";\n\nclass Timer extends React.Component {\n  state = {\n    startTime: null,\n    totalTime: 0,\n    displayTime: \"00:00:00.00\",\n  };\n\n  componentDidMount() {\n    const startTime = new Date().getTime();\n    this.timeInterval = setInterval(() => {\n      const duration = new Date().getTime() - this.state.startTime;\n      const displayTime = this.props.convertToTimeDisplay(duration);\n      this.setState({\n        displayTime,\n      });\n    }, 1);\n    this.setState({ startTime });\n  }\n\n  componentWillUnmount() {\n    this.props.updateTotalTime(new Date().getTime() - this.state.startTime);\n    clearInterval(this.timeInterval);\n  }\n\n  render() {\n    return <div>{this.state.displayTime}</div>;\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\n\nconst TrackInfo = (props) => {\n  return (\n    <div>\n      <a href={props.currentTrack.external_urls.spotify} target=\"_blank\">\n        {props.currentTrack.name}\n      </a>{\" \"}\n      by{\" \"}\n      {props.currentTrack.artists.map((artist) => (\n        <span key={artist.id}>\n          <a href={artist.external_urls.spotify} target=\"_blank\">\n            {artist.name}\n          </a>{\" \"}\n          &{\" \"}\n        </span>\n      ))}\n      {/* album of song track */}\n      <p>\n        album:{\" \"}\n        <a\n          href={props.currentTrack.album.external_urls.spotify}\n          target=\"_blank\"\n        >\n          {props.currentTrack.album.name}\n        </a>\n      </p>\n      <img src={props.currentTrack.album.images[1].url} />\n      <button onClick={props.changeCurrentTrack}>NEXT</button>\n    </div>\n  );\n};\n\nexport default TrackInfo;\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport TrackInfo from \"./TrackInfo\";\nimport \"./index.css\";\n\nclass Game extends React.Component {\n  state = {\n    giveup: false, // did user give up on guessing current song?\n  };\n\n  changeCurrentTrack = () => {\n    // updates current track when user gets the song title correct\n    this.setState({\n      giveup: false,\n    });\n    this.props.updateUserGuess(null);\n    this.props.increaseGameCount();\n    this.props.updateCurrentTrack();\n  };\n\n  guessTrack = (event) => {\n    // when user submits a guess\n    event.preventDefault();\n    let realTitle = this.props.currentTrack.name; // real title of song track\n    let correctTitle = this.props.currentTrack.guessName; // edited title of song track\n    let userTitle = this.refs.trackTitle.value; // user's guess\n    userTitle = userTitle.replace(\",\", \"\");\n\n    this.props.updateUserGuess(\n      correctTitle == userTitle || realTitle == userTitle\n    );\n  };\n\n  setGiveupTrue = () => {\n    this.props.increaseGiveupCount();\n    this.setState({\n      giveup: true,\n    });\n  };\n\n  render() {\n    console.log(this.props.currentTrack.guessName);\n    let display = \"\";\n    if (this.props.correct == true) {\n      // if user's guess is correct\n      display = (\n        <div>\n          <h5>CORRECT!</h5>\n          <TrackInfo\n            currentTrack={this.props.currentTrack}\n            changeCurrentTrack={this.changeCurrentTrack}\n          />\n        </div>\n      );\n    } else if (this.state.giveup) {\n      display = (\n        <TrackInfo\n          currentTrack={this.props.currentTrack}\n          changeCurrentTrack={this.changeCurrentTrack}\n        />\n      );\n    } else if (this.props.correct == false) {\n      display = <h5>INCORRECT! Try again!</h5>;\n    }\n\n    return (\n      <div className=\"container\" style={this.props.backgroundColor}>\n        {!this.props.correct && !this.state.giveup && (\n          <Timer\n            updateTotalTime={this.props.updateTotalTime}\n            convertToTimeDisplay={this.props.convertToTimeDisplay}\n            giveup={this.state.giveup}\n            correct={this.props.correct}\n          />\n        )}\n        <h1>{this.props.genre}</h1>\n        <p>\n          {this.props.gameCount + 1} / {this.props.totalGameCount}\n        </p>\n        <audio src={this.props.currentTrack.preview_url} controls />\n\n        {!this.props.correct && !this.state.giveup && (\n          <div>\n            <button className=\"giveup-button\" onClick={this.setGiveupTrue}>\n              GIVE UP\n            </button>\n            <form onSubmit={this.guessTrack}>\n              <input\n                id=\"userGuess\"\n                ref=\"trackTitle\"\n                placeholder=\"song title\"\n                type=\"text\"\n              />\n              <button type=\"action\">guess</button>\n            </form>\n          </div>\n        )}\n        <div className=\"guessDisplay\">{display}</div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./index.css\";\n\nclass End extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>game stats</h1>\n        <div className=\"gamestats-container\">\n          <p>\n            <span>correct guesses</span>:{\" \"}\n            <span>{this.props.correctGuesses}</span>\n          </p>\n          <p>\n            <span>incorrect guesses</span>:{\" \"}\n            <span>{this.props.incorrectGuesses}</span>\n          </p>\n          <p>\n            <span>gave up</span>: <span>{this.props.giveupCount} times</span>\n          </p>\n          <p>\n            <span>total time</span>:{\" \"}\n            <span>{this.props.convertToTimeDisplay(this.props.totalTime)}</span>\n          </p>\n          <p>\n            <span>average time</span>:{\" \"}\n            <span>\n              {this.props.convertToTimeDisplay(\n                this.props.totalTime / this.props.gameCount\n              )}\n            </span>\n          </p>\n        </div>\n        <button onClick={this.props.resetStates}>Play again</button>\n      </div>\n    );\n  }\n}\n\nexport default End;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Helmet from \"react-helmet\";\nimport Start from \"./Components/Start/\";\nimport Game from \"./Components/Game/\";\nimport End from \"./Components/End/\";\nimport favicon from \"./images/favicon.png\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    genre: null, // genre user selected\n    tracks: {}, // all remaining tracks that can be played\n    currentTrack: null, // current track shown to user\n    totalGameCount: 10, // how many total songs to play for the whole game\n    gameCount: 0, // how many song tracks have been played\n    correctGuesses: 0, // how many times user has guessed correctly\n    incorrectGuesses: 0, // how many times user has guessed incorrectly\n    giveupCount: 0, // how many times the user has given up\n    correct: null, // is user's current guess correct\n    backgroundColor: { backgroundColor: \"#9370DB\" }, // background color of page\n    totalTime: 0, // total amount of time user spent playing game\n  };\n\n  updateGenre = (genre) => {\n    // gets track by genre\n    const self = this;\n    axios\n      .post(\"/api/getTrackByGenre\", {\n        genre,\n      })\n      .then(function (response) {\n        console.log(genre);\n        self.setState((prevState) => {\n          return {\n            genre,\n            tracks: response.data,\n          };\n        });\n        self.updateCurrentTrack();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  updateCurrentTrack = () => {\n    this.setState((prevState) => {\n      const prevTracks = prevState.tracks;\n      let keys = Object.keys(prevTracks);\n      if (keys.length == 0 && this.state.gameCount == 1) {\n        return;\n      } else if (keys.length == 0) {\n        this.updateGenre(this.state.genre);\n        return;\n      }\n\n      let randomKey = (keys.length * Math.random()) << 0;\n      let randomTrack = prevTracks[keys[randomKey]];\n\n      // if no preview_url\n      while (!randomTrack.preview_url && keys.length != 0) {\n        delete prevTracks[keys[randomKey]];\n        keys = Object.keys(prevTracks);\n        randomKey = (keys.length * Math.random()) << 0;\n        randomTrack = prevTracks[keys[randomKey]];\n      }\n\n      if (keys.length == 0) {\n        this.updateGenre(this.state.genre);\n        return;\n      }\n\n      // makes sure track titles don't contain extra characters\n      let trackTitle = randomTrack.name;\n      trackTitle = trackTitle.split(\"-\")[0];\n      trackTitle = trackTitle.split(\"(\")[0];\n      trackTitle = trackTitle.split(\":\")[0];\n      trackTitle = trackTitle.replace(\"&\", \"and\");\n      trackTitle = trackTitle.replace(\",\", \"\");\n      trackTitle = trackTitle.trim().toLowerCase();\n      randomTrack.guessName = trackTitle;\n\n      // delete track from this.state.currentTrack\n      delete prevTracks[keys[randomKey]];\n\n      return {\n        currentTrack: randomTrack,\n        tracks: prevTracks,\n      };\n    });\n  };\n\n  resetStates = () => {\n    // resets all states when game is done\n    this.setState((prevState) => {\n      return {\n        genre: null,\n        tracks: [],\n        currentTrack: null,\n        correct: null,\n        gameCount: 0,\n        correctGuesses: 0,\n        incorrectGuesses: 0,\n        giveupCount: 0,\n        totalTime: 0,\n      };\n    });\n  };\n\n  increaseGameCount = () => {\n    // increases this.state.gameCount by one\n    this.setState((prevState) => {\n      return {\n        gameCount: prevState.gameCount + 1,\n      };\n    });\n  };\n\n  increaseGiveupCount = () => {\n    // increases this.state.giveupCount by one\n    this.setState((prevState) => {\n      return {\n        giveupCount: prevState.giveupCount + 1,\n      };\n    });\n  };\n\n  updateUserGuess = (value) => {\n    // changes this.state.correct to {null, true, false}\n    // and changes style (background color)\n    let style = {\n      backgroundColor: \"#9370DB\",\n    };\n    if (value == true) {\n      style.backgroundColor = \"#32CD32\";\n      this.setState((prevState) => {\n        return {\n          correctGuesses: prevState.correctGuesses + 1,\n        };\n      });\n    } else if (value == false) {\n      style.backgroundColor = \"#FA8072\";\n      this.setState((prevState) => {\n        return {\n          incorrectGuesses: prevState.incorrectGuesses + 1,\n        };\n      });\n    }\n\n    this.setState({\n      correct: value,\n      backgroundColor: style,\n    });\n  };\n\n  updateTotalTime = (time) => {\n    this.setState((prevState) => {\n      return {\n        totalTime: prevState.totalTime + time,\n      };\n    });\n  };\n\n  convertToTimeDisplay = (duration) => {\n    let milliseconds = parseInt((duration % 1000) / 100);\n    let seconds = Math.floor((duration / 1000) % 60);\n    let minutes = Math.floor((duration / (1000 * 60)) % 60);\n    let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n    return hours + \":\" + minutes + \":\" + seconds + \".\" + milliseconds;\n  };\n\n  render() {\n    let display;\n    if (this.state.gameCount == this.state.totalGameCount) {\n      display = (\n        <End\n          gameCount={this.state.gameCount}\n          correctGuesses={this.state.correctGuesses}\n          incorrectGuesses={this.state.incorrectGuesses}\n          giveupCount={this.state.giveupCount}\n          totalTime={this.state.totalTime}\n          resetStates={this.resetStates}\n          convertToTimeDisplay={this.convertToTimeDisplay}\n        />\n      );\n    } else if (this.state.currentTrack) {\n      display = (\n        <div>\n          <Game\n            currentTrack={this.state.currentTrack}\n            genre={this.state.genre}\n            gameCount={this.state.gameCount}\n            totalGameCount={this.state.totalGameCount}\n            correct={this.state.correct}\n            backgroundColor={this.state.backgroundColor}\n            totalTime={this.totalTime}\n            updateCurrentTrack={this.updateCurrentTrack}\n            resetStates={this.resetStates}\n            increaseGameCount={this.increaseGameCount}\n            increaseGiveupCount={this.increaseGiveupCount}\n            updateUserGuess={this.updateUserGuess}\n            updateTotalTime={this.updateTotalTime}\n            convertToTimeDisplay={this.convertToTimeDisplay}\n          />\n        </div>\n      );\n    } else {\n      display = <Start updateGenre={this.updateGenre} />;\n    }\n    return (\n      <div>\n        <Helmet\n          title=\"Lyrical Notes\"\n          meta={[\n            {\n              name: \"description\",\n              content: \"Guess the song from listening to just 30 seconds!\",\n            },\n            {\n              name: \"keywords\",\n              content: \"game, Spotify, music\",\n            },\n          ]}\n          link={[\n            { rel: \"shortcut icon\", type: \"image/png\", href: `${favicon}` },\n          ]}\n        />\n        <div className=\"App\" style={this.state.backgroundColor}>\n          {display}\n          <footer>\n            made with &hearts; by <a href=\"http://annieliu.me/\">annie liu</a>{\" \"}\n            &#8226;{\" \"}\n            <a href=\"https://github.com/liua13/lyrical_notes\">source code</a>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}